Cyoda Event-Driven Workflow Overview:

Cyoda manages workflows by reacting to entity events, orchestrating processes as state machines. Similar to AWS Step Functions, each workflow in Cyoda leverages state transitions that define how entities evolve over their lifecycle.

Cyoda design json, based on the complete prd:

The JSON structure provided outlines the conceptual model behind the Cyoda application. It maps each entity type to its possible data sources, transitions, and dependencies within an event-driven architecture:

Example json:

{
  "can_proceed": false,
  "entities": [
    {
      "depends_on_entity": "None",
      "entity_name": "data_ingestion_job",
      "entity_source": "SCHEDULED",
      "entity_type": "JOB",
      "entity_workflow": {
        "class_name": "com.cyoda.tdb.model.treenode.TreeNodeEntity",
        "name": "data_ingestion_workflow",
        "transitions": [
          {
            "criteria": {
              "description": "Triggered by a scheduled job to ingest data.",
              "name": "scheduled_ingestion"
            },
            "description": "Start the data ingestion process from the API.",
            "end_state": "data_ingested",
            "end_state_description": "Data has been successfully ingested.",
            "name": "start_data_ingestion",
            "process": {
              "adds_new_entites": "raw_data_entity",
              "description": "Process to ingest raw data from the specified API.",
              "name": "ingest_raw_data"
            },
            "start_state": "None",
            "start_state_description": "Initial state before data ingestion."
          }
        ]
      }
    },
    {
      "depends_on_entity": "data_ingestion_job",
      "entity_name": "raw_data_entity",
      "entity_source": "ENTITY_EVENT",
      "entity_type": "EXTERNAL_SOURCES_PULL_BASED_RAW_DATA",
      "entity_workflow": {
        "name": "raw_data_entity_workflow",
        "class_name": "com.cyoda.tdb.model.treenode.TreeNodeEntity",
        "transitions": []
      }
      }
      //other entities,
  //entities names, processor names - should be all lowercase and underscore in order to match python style
    }
  ]
}

For error 'None' is not of type 'object' use {} instead or for workflow "entity_workflow": {
        "name": "entity_workflow",
        "class_name": "com.cyoda.tdb.model.treenode.TreeNodeEntity",
        "transitions": []
      }
Read this instruction, tell that you read it and wait for new instructions

Example of server-side function file:
```python
import asyncio
import logging

from common.config.config import ENTITY_VERSION
from app_init.app_init import entity_service

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def process_name(meta, data):
    entity = await entity_service.get_item(meta["token"], "order", ENTITY_VERSION, data["id"])
    logger.info("processing ")

```