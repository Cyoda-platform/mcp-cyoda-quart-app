Example of server-side function file:
```python
import logging

from common.app_init import entity_service, ai_service
from common.config.config import ENTITY_VERSION, TRINO_AI_API
from common.service.trino_service import get_trino_schema_id_by_entity_name
from common.util.utils import read_json_file, parse_json

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

#use meta to get token
#data is current entity data. you can find entity data model in {current_entity_name}.json file which is available in your session context. study the data model before writing any code
#in the process function you can work with current entity data, analyse it, get other entities to which current entity has reference, add new "dependant" entities
def process_name(meta, data): //process function can accept only these parameters
    entity = entity_service.get_item(meta["token"], some_entity_name, ENTITY_VERSION, data["id"])
    ...
    dependant_entity_data = data.dependant_entity_data
    entity = entity_service.add_item(meta["token"], dependant_entity_name, ENTITY_VERSION, dependant_entity_data)


def data_aggregation_process_name(meta, data):
    aggregated_data_entity_schema = read_json_file(aggregated_data_entity_path)
    # Make API call to AI service to generate aggregated data report based on schema
    aggregated_data = ai_service.ai_chat(token=meta["token"],
                       chat_id=get_trino_schema_id_by_entity_name("response_data_entity"),
                       ai_endpoint=TRINO_AI_API,
                       ai_question=f"Could you please return json report based on this schema: {json.dumps(aggregated_data_entity_schema)}. Return only json")
    # Parse and validate the returned JSON data
    aggregated_data_entity_data = json.loads(parse_json(aggregated_data))
    # Store the aggregated data entity and get its ID
    aggregated_data_entity_id = entity_service.add_item(meta["token"], "aggregated_data_entity", ENTITY_VERSION, aggregated_data_entity_data)

class TestSendEmailProcess(unittest.TestCase):
#This is correct mock, common.app_init.entity_service without .add_item will not work!
    @patch("common.app_init.entity_service.add_item")
    def test_send_email_process(self, mock_entity_service):
        .....


# Uncomment the line below to run the tests when this script is executed directly
if __name__ == '__main__':
     unittest.main()

```

Example response that passes validation checks

{
  "can_proceed": false,
  "code": "all your code here"
}