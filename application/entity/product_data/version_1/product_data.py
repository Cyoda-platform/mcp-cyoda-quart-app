# entity/product_data/version_1/product_data.py

"""
ProductData Entity for Product Performance Analysis System

Represents product information fetched from Pet Store API including sales data,
stock levels, and performance metrics as specified in functional requirements.
"""

from datetime import datetime, timezone
from typing import Any, ClassVar, Dict, List, Optional

from pydantic import ConfigDict, Field, field_validator

from common.entity.cyoda_entity import CyodaEntity


class ProductData(CyodaEntity):
    """
    ProductData represents product information from Pet Store API with performance metrics.
    
    Stores product details, sales data, stock levels, and calculated performance indicators
    for analysis and reporting as specified in functional requirements.
    """

    # Entity constants
    ENTITY_NAME: ClassVar[str] = "ProductData"
    ENTITY_VERSION: ClassVar[int] = 1

    # Core product information from Pet Store API
    product_id: str = Field(..., description="Unique product identifier from Pet Store API")
    name: str = Field(..., description="Product name")
    category: str = Field(..., description="Product category")
    status: str = Field(..., description="Product status (available, pending, sold)")
    
    # Sales and performance data
    sales_volume: Optional[int] = Field(
        default=0,
        alias="salesVolume", 
        description="Total sales volume for the product"
    )
    revenue: Optional[float] = Field(
        default=0.0,
        description="Total revenue generated by the product"
    )
    stock_level: Optional[int] = Field(
        default=0,
        alias="stockLevel",
        description="Current stock level"
    )
    
    # Performance metrics
    inventory_turnover_rate: Optional[float] = Field(
        default=0.0,
        alias="inventoryTurnoverRate",
        description="Calculated inventory turnover rate"
    )
    performance_score: Optional[float] = Field(
        default=0.0,
        alias="performanceScore",
        description="Calculated performance score (0-100)"
    )
    
    # API data extraction metadata
    api_source: str = Field(
        default="petstore",
        alias="apiSource",
        description="Source API identifier"
    )
    data_format: str = Field(
        default="json",
        alias="dataFormat", 
        description="Format of extracted data (json/xml)"
    )
    extraction_timestamp: Optional[str] = Field(
        default_factory=lambda: datetime.now(timezone.utc).isoformat().replace("+00:00", "Z"),
        alias="extractionTimestamp",
        description="Timestamp when data was extracted from API"
    )
    
    # Analysis flags
    is_high_performer: Optional[bool] = Field(
        default=False,
        alias="isHighPerformer",
        description="Flag indicating if product is a high performer"
    )
    requires_restocking: Optional[bool] = Field(
        default=False,
        alias="requiresRestocking",
        description="Flag indicating if product requires restocking"
    )
    is_slow_moving: Optional[bool] = Field(
        default=False,
        alias="isSlowMoving",
        description="Flag indicating if product is slow-moving inventory"
    )

    # Raw API response data
    raw_api_data: Optional[Dict[str, Any]] = Field(
        default=None,
        alias="rawApiData",
        description="Raw response data from Pet Store API"
    )

    @field_validator("product_id")
    @classmethod
    def validate_product_id(cls, v: str) -> str:
        """Validate product ID field"""
        if not v or len(v.strip()) == 0:
            raise ValueError("Product ID must be non-empty")
        return v.strip()

    @field_validator("name")
    @classmethod
    def validate_name(cls, v: str) -> str:
        """Validate product name field"""
        if not v or len(v.strip()) == 0:
            raise ValueError("Product name must be non-empty")
        if len(v) > 200:
            raise ValueError("Product name must be at most 200 characters long")
        return v.strip()

    @field_validator("category")
    @classmethod
    def validate_category(cls, v: str) -> str:
        """Validate product category field"""
        if not v or len(v.strip()) == 0:
            raise ValueError("Product category must be non-empty")
        return v.strip()

    @field_validator("status")
    @classmethod
    def validate_status(cls, v: str) -> str:
        """Validate product status field"""
        allowed_statuses = ["available", "pending", "sold"]
        if v not in allowed_statuses:
            raise ValueError(f"Status must be one of: {allowed_statuses}")
        return v

    @field_validator("data_format")
    @classmethod
    def validate_data_format(cls, v: str) -> str:
        """Validate data format field"""
        allowed_formats = ["json", "xml"]
        if v not in allowed_formats:
            raise ValueError(f"Data format must be one of: {allowed_formats}")
        return v

    def calculate_performance_metrics(self) -> None:
        """Calculate performance metrics based on sales and stock data"""
        # Calculate inventory turnover rate
        if self.stock_level and self.stock_level > 0:
            self.inventory_turnover_rate = (self.sales_volume or 0) / self.stock_level
        else:
            self.inventory_turnover_rate = 0.0
            
        # Calculate performance score (0-100 based on sales volume and revenue)
        max_sales = 1000  # Baseline for scoring
        max_revenue = 10000.0  # Baseline for scoring
        
        sales_score = min((self.sales_volume or 0) / max_sales * 50, 50)
        revenue_score = min((self.revenue or 0) / max_revenue * 50, 50)
        self.performance_score = sales_score + revenue_score
        
        # Set analysis flags
        self.is_high_performer = self.performance_score >= 70
        self.requires_restocking = (self.stock_level or 0) < 10
        self.is_slow_moving = (self.sales_volume or 0) < 5 and (self.stock_level or 0) > 50

    def update_from_api_data(self, api_data: Dict[str, Any]) -> None:
        """Update entity fields from Pet Store API response data"""
        self.raw_api_data = api_data
        
        # Extract standard fields from API response
        if "id" in api_data:
            self.product_id = str(api_data["id"])
        if "name" in api_data:
            self.name = api_data["name"]
        if "category" in api_data and isinstance(api_data["category"], dict):
            self.category = api_data["category"].get("name", "Unknown")
        if "status" in api_data:
            self.status = api_data["status"]
            
        # Update extraction timestamp
        self.extraction_timestamp = datetime.now(timezone.utc).isoformat().replace("+00:00", "Z")

    def to_api_response(self) -> Dict[str, Any]:
        """Convert to API response format"""
        data = self.model_dump(by_alias=True)
        data["state"] = self.state
        return data

    model_config = ConfigDict(
        populate_by_name=True,
        use_enum_values=True,
        validate_assignment=True,
        extra="allow",
    )
