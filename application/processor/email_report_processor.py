"""
EmailReportProcessor for Cyoda Client Application

Sends comment analysis reports via email to specified recipients.
Formats the report data into a readable email format and handles email delivery.
"""

import logging
from typing import Any

from application.entity.comment_analysis_report.version_1.comment_analysis_report import (
    CommentAnalysisReport,
)
from common.entity.entity_casting import cast_entity
from common.processor.base import CyodaEntity, CyodaProcessor


class EmailReportProcessor(CyodaProcessor):
    """
    Processor for sending CommentAnalysisReport entities via email.
    Formats the report data and simulates email delivery.
    """

    def __init__(self) -> None:
        super().__init__(
            name="EmailReportProcessor",
            description="Sends comment analysis reports via email",
        )
        self.logger: logging.Logger = getattr(
            self, "logger", logging.getLogger(__name__)
        )

    async def process(self, entity: CyodaEntity, **kwargs: Any) -> CyodaEntity:
        """
        Send the analysis report via email.

        Args:
            entity: The CommentAnalysisReport entity to email
            **kwargs: Additional processing parameters

        Returns:
            The report with email status updated
        """
        try:
            self.logger.info(
                f"Sending email report for entity {getattr(entity, 'technical_id', '<unknown>')}"
            )

            # Cast the entity to CommentAnalysisReport for type-safe operations
            report = cast_entity(entity, CommentAnalysisReport)

            # Generate email content
            email_subject = self._generate_email_subject(report)
            email_body = self._generate_email_body(report)

            # Simulate email sending (in a real implementation, this would use an email service)
            success = await self._send_email(
                recipient=report.recipient_email, subject=email_subject, body=email_body
            )

            if success:
                # Mark email as sent
                report.mark_email_sent(email_subject)

                self.logger.info(
                    f"Email report sent successfully to {report.recipient_email} "
                    f"for post {report.post_id}"
                )
            else:
                self.logger.error(
                    f"Failed to send email report to {report.recipient_email} "
                    f"for post {report.post_id}"
                )
                raise Exception("Email delivery failed")

            return report

        except Exception as e:
            self.logger.error(
                f"Error sending email report {getattr(entity, 'technical_id', '<unknown>')}: {str(e)}"
            )
            raise

    def _generate_email_subject(self, report: CommentAnalysisReport) -> str:
        """
        Generate email subject line for the report.

        Args:
            report: The CommentAnalysisReport entity

        Returns:
            Email subject string
        """
        return f"Comment Analysis Report - Post {report.post_id} ({report.total_comments} comments)"

    def _generate_email_body(self, report: CommentAnalysisReport) -> str:
        """
        Generate formatted email body for the report.

        Args:
            report: The CommentAnalysisReport entity

        Returns:
            Formatted email body string
        """
        sentiment_dist = report.get_sentiment_distribution()

        email_body = f"""
Comment Analysis Report
=======================

Report Title: {report.report_title}
Post ID: {report.post_id}
Generated: {report.generated_at}

SUMMARY STATISTICS
------------------
Total Comments Analyzed: {report.total_comments}
Average Sentiment Score: {report.average_sentiment_score:.3f} (range: -1.0 to 1.0)
Average Word Count: {report.average_word_count:.1f} words per comment

SENTIMENT DISTRIBUTION
----------------------
Positive Comments: {report.positive_comments} ({sentiment_dist['positive']:.1f}%)
Negative Comments: {report.negative_comments} ({sentiment_dist['negative']:.1f}%)
Neutral Comments: {report.neutral_comments} ({sentiment_dist['neutral']:.1f}%)

MOST COMMON KEYWORDS
--------------------
{', '.join(report.most_common_keywords[:10]) if report.most_common_keywords else 'No keywords found'}

ANALYSIS DETAILS
----------------
Report Version: {report.report_version}
Analysis completed on: {report.generated_at}

This report was automatically generated by the Cyoda Comment Analysis System.
"""
        return email_body.strip()

    async def _send_email(self, recipient: str, subject: str, body: str) -> bool:
        """
        Simulate sending an email (in a real implementation, this would use an email service).

        Args:
            recipient: Email address to send to
            subject: Email subject
            body: Email body content

        Returns:
            True if email was sent successfully, False otherwise
        """
        try:
            # Simulate email sending with logging
            self.logger.info(f"SIMULATED EMAIL SEND:")
            self.logger.info(f"  To: {recipient}")
            self.logger.info(f"  Subject: {subject}")
            self.logger.info(f"  Body Length: {len(body)} characters")

            # In a real implementation, you would use an email service like:
            # - SMTP with smtplib
            # - AWS SES
            # - SendGrid
            # - Mailgun
            # etc.

            # For now, we'll simulate success
            # You could add environment variables to control this behavior
            return True

        except Exception as e:
            self.logger.error(f"Email sending failed: {str(e)}")
            return False
